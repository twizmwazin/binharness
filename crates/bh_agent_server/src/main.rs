use std::net::IpAddr;

use clap::Parser;
use futures::{future, prelude::*};
use tarpc::{
    server::{self, Channel},
    tokio_serde::formats::Json,
};

use bh_agent_common::BhAgentService;
use bh_agent_server::BhAgentServer;

#[derive(Parser)]
#[command(author, version, about, long_about = None)]
struct Args {
    address: IpAddr,
    port: u16,
}

#[tokio::main]
async fn main() -> anyhow::Result<()> {
    env_logger::init();

    let args = Args::parse();

    let mut listener = tarpc::serde_transport::tcp::listen(&(args.address, args.port), Json::default).await?;
    listener.config_mut().max_frame_length(usize::MAX);
    listener
        // Ignore accept errors.
        .filter_map(|r| future::ready(r.ok()))
        .map(server::BaseChannel::with_defaults)
        // serve is generated by the service attribute. It takes as input any type implementing
        // the generated World trait.
        .map(|channel| {
            let server = BhAgentServer::new(channel.transport().peer_addr().unwrap());
            channel.execute(server.serve())
        })
        // Max 10 channels.
        .buffer_unordered(10)
        .for_each(|_| async {})
        .await;

    Ok(())
}
