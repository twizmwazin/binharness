use std::net::IpAddr;

use argh::FromArgs;
use futures::{future, prelude::*};
use tarpc::{
    server::{self, Channel},
    tokio_serde::formats::Json,
};
use tokio::runtime;

use bh_agent_common::BhAgentService;
use bh_agent_server::BhAgentServer;

#[derive(FromArgs)]
/// bh_agent_server
struct Args {
    /// address to listen on
    #[argh(positional)]
    address: IpAddr,
    /// port to listen on
    #[argh(positional)]
    port: u16,
    #[cfg(not(target_os = "windows"))]
    /// daemonize the process
    #[argh(switch, short = 'd')]
    daemonize: bool,
}

fn main() -> anyhow::Result<()> {
    env_logger::init();
    let args = argh::from_env::<Args>();

    // Daemonize
    #[cfg(not(target_os = "windows"))]
    if args.daemonize {
        daemonize::Daemonize::new()
            .pid_file("/tmp/bh_agent_server.pid")
            .start()
            .unwrap();
    }

    // Setup runtime
    let rt = runtime::Builder::new_multi_thread()
        .enable_all()
        .build()
        .unwrap();

    // Setup listener
    let mut listener = rt.block_on(async {
        return tarpc::serde_transport::tcp::listen(&(args.address, args.port), Json::default)
            .await;
    })?;
    listener.config_mut().max_frame_length(usize::MAX);

    // Run the listener
    rt.block_on(async {
        listener
            // Ignore accept errors.
            .filter_map(|r| future::ready(r.ok()))
            .map(server::BaseChannel::with_defaults)
            // serve is generated by the service attribute. It takes as input any type implementing
            // the generated World trait.
            .map(|channel| {
                let server = BhAgentServer::new(channel.transport().peer_addr().unwrap());
                channel.execute(server.serve())
            })
            // Max 10 channels.
            .buffer_unordered(10)
            .for_each(|_| async {})
            .await;
    });

    Ok(())
}
